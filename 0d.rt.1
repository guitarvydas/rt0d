(defstruct ∘ FIFO
  (enqueue (Action () ()) -)
  (dequeue (Attribute (Message)) -)
  (push (Action (Message) ()) -)
  (clear (Action () ()) -)
  (empty? (Predicate ()) -))
(definit ∘ FIFO/new ()())

(defstruct ∘ Message
  (port (Attribute (String)) .)
  (datum (Attribute (*)) .))
(definit ∘ Message/new (%p ∘ %d) 
  (mutate (slot ∘ port ∘ $) %p) 
  (mutate (slot ∘ datum ∘ $) %d))

(defstruct ∘ Input-Message
  (port (Attribute (String)) .)
  (datum (Attribute (*)) .))
(definit ∘ Input-Message/new (%p ∘ %d) (Message/new ∘ %p ∘ %d))

(defstruct ∘ Output-Message
  (port (Attribute (String)) .)
  (datum (Attribute (*)) .))
(definit ∘ Output-Message/new (%p ∘ %d) (Message/new ∘ %p ∘ %d))

(defstruct ∘ Sender
  (component (Component) .)
  (port (String) .))
(definit ∘ Sender/new (%C ∘ %P) 
  (mutate (slot ∘ component ∘ $) %C)
  (mutate (slot ∘ port ∘ $) %P))

(defstruct ∘ Receiver
  (component (Component) .)
  (port (String) .))
(definit ∘ Receiver/new (%C ∘ %P) 
  (mutate (slot ∘ component ∘ $) %C)
  (mutate (slot ∘ port ∘ $) %P))

(defstruct ∘ Connection
  (sender (Sender) .)
  (receiver (Receiver) .)
  (deliver (Action (Output-Message) ()) .))
(definit ∘ Connection/new (%S ∘ %R)
  (mutate (slot ∘ sender ∘ $) %S)
  (mutate (slot ∘ receiver ∘ $) %S))

(defstruct ∘ Up
  (sender (Sender) .)
  (receiver (Receiver) .)
  (deliver (Action () (Output-Message)) .))
(definit ∘ Up/new (%S ∘ %R) 
  (mutate ∘ $ (Connection/new ∘ %S ∘ %R))
  (mutate (slot ∘ deliver ∘ $) &deliver-up))
(defstruct ∘ Down
  (sender (Sender) .)
  (receiver (Receiver) .)
  (deliver (Action () (Output-Message)) .))
(definit ∘ Down/new (%S ∘ %R) 
  (mutate ∘ $ (Connection/new ∘ %S ∘ %R))
  (mutate (slot ∘ deliver ∘ $) &deliver-down))
(defstruct ∘ Across
  (sender (Sender) .)
  (receiver (Receiver) .)
  (deliver (Action () (Output-Message)) .))
(definit ∘ Across/new (%S ∘ %R) 
  (mutate ∘ $ (Connection/new ∘ %S ∘ %R))
  (mutate (slot ∘ deliver ∘ $) &deliver-across))
(defstruct ∘ Through
  (sender (Sender) .)
  (receiver (Receiver) .)
  (deliver (Action () (Output-Message)) .))
(definit ∘ Through/new (%S ∘ %R) 
  (mutate ∘ $ (Connection/new ∘ %S ∘ %R))
  (mutate (slot ∘ deliver ∘ $) &deliver-through))

(defstruct ∘ Eh
  (name (Attribute (String)) -)
  (step (Action () ()) -)
  (busy? (Predicate) #todo)
  (inq (FIFO) (FIFO/new))
  (outq (FIFO) (FIFO/new))
  (enqueue-input (Action (Input-Message) ()) -)
  (dequeue-input (Action () (Input-Message)) -)
  (empty-input? (Predicate ()))
  (output-queue (Attribute (FIFO)) .)
  (enqueue-output (Action () (Output-Message)) -)
  (dequeue-output (Action () (Output-Message)) -)
  (empty-output? (Predicate ()) -)
  (clear-outputs (Action () ()) -)
  (send (Action (String ∘ *) ()) -)
  (outputs-as-list (Attribute (List (Output-Message))) -)
  (map-outputs (Action (Action (Output-Message) ()) ()) -))
(definit ∘ Eh/new (%N)
  (mutate (slot ∘ name ∘ $) %N)
  (mutate (slot ∘ inq ∘ $) (FIFO/new))
  (mutate (slot ∘ outq ∘ $) (FIFO/new)))

(defstruct ∘ Leaf (%N ∘ %S)
  (name (Attribute (String)) .)
  (step (Action () ()) .)
  (busy? (Predicate ()) .))
(definit ∘ Leaf/new (%N ∘ %S)
  (mutate ∘ $ (Eh/new))
  (mutate (slot ∘ name ∘ $) %N)
  (mutate (slot ∘ step ∘ $) %S)
  (mutate (slot ∘ busy? ∘ $) #false))

(defstruct ∘ Container (%N ∘ %S)
  (name (Attribute (String)) .)
  (step (Action () ()) .)
  (busy? (Predicate ()) .))
(definit ∘ Container/new (%N ∘ %S)
  (mutate ∘ $ (Eh/new))
  (mutate (slot ∘ name ∘ $) %N)
  (mutate (slot ∘ step ∘ $) &container-step)
  (mutate (slot ∘ busy? ∘ $) &container-busy))



(defm ∘ container-busy? ()
  (cond
    ((or (any ∘ child ∘ is ∘ busy? ∘ $) 
	 (any ∘ child ∘ has ∘ inputs ∘ pending ∘ $))
     #true)
    (t ∘ #false)))

(defm ∘ container-step ()
  (cond
    ((or (any ∘ child ∘ is ∘ busy? ∘ $) 
	 (any ∘ child ∘ has ∘ inputs ∘ pending ∘ $))
     (step ∘ all ∘ children ∘ $))
    (* 
       (defscope ∘ _m
	 (mutate ∘ _m (pop ∘ $))
	 (for ∘ every ∘ connection ∘ deliver ∘ message ∘ $ ∘ _m)))))

(defm ∘ deliver-up (%m)
  (enqueue-output (slot ∘ receiver ∘ $) (slot ∘ datum ∘ %m)))

(defm ∘ deliver-down (%m)
  (enqeue-input (slot ∘ receiver ∘ $) (slot ∘ datum ∘ %m)))

(defm ∘ deliver-across (%m)
  (enqeue-input (slot ∘ receiver ∘ $) (slot ∘ datum ∘ %m)))

(defm ∘ deliver-through (%m)
  (enqueue-output (slot ∘ receiver ∘ $) (slot ∘ datum ∘ %m)))

(defm ∘ leaf-step ()
  (defscope ∘ _m
    (mutate ∘ _m (pop ∘ $))
    (send ∘ $ ∘ "stdout" (slot ∘ datum ∘ _m))))

