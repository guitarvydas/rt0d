rt0d {
  RT0D = Def+
  Def = Defstruct | Defun
  
  Defstruct = "(" "defstruct" br name Field+ ")"
  Defun = "(" "defun" br name Formals Body ")"
  
  Field = "(" name Type FieldInitializer ")"
  
  Slot = "(" "slot" br name br self ")"
  Mutate = "(" "mutate" (Slot | self) MutationSource ")"

  Type =
    | "(" "Action" InputTypes OutputTypes ")" -- action
    | "(" "Attribute" OutputTypes ")" -- attribute
    | "(" "Predicate" ")" -- predicate
    | "(" name ")" -- userDefined

  InputTypes = "(" InputType* ")"
  InputType =
    | Type
    | "*"
    | name
    
  OutputTypes = "(" OutputType* ")"
  OutputType =
    | Type
    | "*"
    | name
    
  Formals = "(" (name br?)* ")"
  
  FieldInitializer = 
    | "#undefined" -- undefined
    | "-" -- elsewhere

  MutationSource =
    | Slot -- slot
    | name -- name

  Body =
    | CondExpression
    | Slot
    | Mutate
    | ScopeDefinition
    | PhraseCall
    | FunctionCall

  Source =
    | tempVariableReference
    | parameterReference
    | self

  ScopeDefinition = "(" "defscope" br tempVariable Body ")"

  parameterDefinition = "(" (parameter br?)* ")"
  parameterReference = parameter
  parameter =
    | self -- self
    | "%" name -- name

  tempVariableReference = tempVariable

  tempVariable = "_" name

  PhraseCall =
    | "(" "any" br "child" br "is" br "busy?" br self ")" -- anyChildBusy
    | "(" "any" br "child" br "has" br "inputs" br "pending" br self ")" -- anyChildHasInputs
    | "(" "for" br "every" br "connection" br "deliver" br "message" br self br tempVariable ")" -- forEveryConnection

  FunctionCall = "(" name Actual? ")"

  Actual =
    | br Slot -- slot
    | br self -- self


  CondExpression = "(" "cond" GuardedBody ")"
  GuardedBody = "("Guard Body ")"
  Guard =
    | "*" -- else
    | Expr -- expr

  Expr =
    | "(" "or" Expr+ ")" -- or
    | Body -- expr

  name = nameChar+
  nameChar = ~space ~br any
  br = space* "âˆ˜" space*

  self = "$"
}
