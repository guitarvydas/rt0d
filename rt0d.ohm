rt0d {
  RT0D = Def+
  Def = Defstruct | Definit | Defm
  
  Defstruct = "(" "defstruct" Defname Field+ ")"
  Definit = "(" "definit" Defname Formals Body ")"
  Defm = "(" "defm" Defname Formals Body ")"

  Defname = br name

  Field = "(" name FieldType FieldInitializer ")"
  
  Slot = "(" "slot" br name self ")"
  Mutate = "(" "mutate" MutationDest MutationSource ")"

  FieldType = "(" Type ")"
  
  Type =
    | "Action" InputTypes OutputTypes -- action
    | "Attribute" OutputTypes -- attribute
    | "Predicate" InputTypes -- predicate
    | "*" br? -- any
    | name -- userDefined

  InputTypes = "(" Ty* ")"
  OutputTypes = "(" Ty* ")"
  Ty = Type br?
    
  Formals = "(" ParameterDeclarations? ")"
  
  FieldInitializer = 
    | "#undefined" -- undefined
    | "-" -- elsewhere

  MutationDest = self | Slot | tempVariableReference
  MutationSource = Source

  Body = ( EmptyBody | Mutate | BodyExpr)+
  BodyExpr =
    | CondExpression
    | ScopeDefinition
    | Source

  Source =
    | Slot
    | PhraseCall
    | FunctionCall
    | tempVariableReference
    | parameterReference
    | self

  ScopeDefinition = "(" "defscope" br tempVariable Body ")"

  ParameterDeclarations =
     | "%" name ParameterDeclarations -- name
     | "%" namenobr                   -- singlename
    
  parameterReference = 
    | "%" namenobr -- name

  tempVariableReference = tempVariable
  tempVariable = "_" name

  PhraseCall =
    | "(" "any" br "child" br "is" br "busy?" br self ")" -- anyChildBusy
    | "(" "any" br "child" br "has" br "inputs" br "pending" br self ")" -- anyChildHasInputs
    | "(" "for" br "every" br "connection" br "deliver" br "message" br self br tempVariable ")" -- forEveryConnection

  FunctionCall = "(" name Actual* ")"

  Actual =
    | Slot -- slot
    | self -- self
    | parameterReference -- parameter
    | tempVariableReference -- tempVariable

  CondExpression = "(" "cond" GuardedBody ")"
  GuardedBody = "(" Guard Body ")"
  Guard =
    | "*" -- else
    | Expr -- expr

  Expr =
    | "(" "or" Expr+ ")" -- or
    | Body -- expr
    | localVariable


  EmptyBody = "(" ")"

  localVariable =
    | parameterReference
    | tempVariableReference
    | self
    
  name = nameChar+ br?
  namenobr = nameChar+
  nameChar = ~space ~br ~"(" ~")" any
  br = space* "âˆ˜" space*

  self = "$"
}
