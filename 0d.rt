(defstruct FIFO
  (enqueue (Action ()))
  (dequeue (Attribute (Message)))
  (push (Action (Message)))
  (clear (Action ()))
  (empty? (Predicate ())))
(defun FIFO/new () (new FIFO))

(defstruct Message
  (port (Attribute (String)) undefined)
  (datum (Attribute (*)) undefined))
(defun Message/new (p d) 
  (mutate (port $) p) 
  (mutate (datum $) d))

(defstruct Input-Message
  (port (Attribute (String)) #undefined)
  (datum (Attribute (*)) #undefined))
(defun Input-Message/new (p d) (Message/new p d))

(defstruct Output-Message
  (port (Attribute (String)) #undefined)
  (datum (Attribute (*)) #undefined))
(defun Output-Message/new (p d) (Message/new p d))

(defstruct Sender
  (component (Component) #undefined)
  (port (String) #undefined))
(defun Sender/new (C P) 
  (mutate (component $) C)
  (mutate (port $) P))

(defstruct Receiver
  (component (Component) #undefined)
  (port (String) #undefined))
(defun Receiver/new (C P) 
  (mutate (component $) C)
  (mutate (port $) P))

(defstruct Connection
  (sender (Sender) #undefined)
  (receiver (Receiver) #undefined)
  (deliver (Action () (Output-Message) #undefined))
(defun Connection/new (S R)
  (mutate (sender $) S)
  (mutate (receiver $) S))

(defstruct Up
  (sender (Sender) #undefined)
  (receiver (Receiver) #undefined)
  (deliver (Action () (Output-Message) #undefined))
(defun Up/new (S R) 
  (mutate $ (Connection/new S R))
  (mutate (deliver $) &deliver-up))
(defstruct Down
  (sender (Sender) #undefined)
  (receiver (Receiver) #undefined)
  (deliver (Action () (Output-Message) #undefined))
(defun Down/new (S R) 
  (mutate $ (Connection/new S R))
  (mutate (deliver $) &deliver-down))
(defstruct Across
  (sender (Sender) #undefined)
  (receiver (Receiver) #undefined)
  (deliver (Action () (Output-Message) #undefined))
(defun Across/new (S R) 
  (mutate $ (Connection/new S R))
  (mutate (deliver $) &deliver-across))
(defstruct Through
  (sender (Sender) #undefined)
  (receiver (Receiver) #undefined)
  (deliver (Action () (Output-Message) #undefined))
(defun Through/new (S R) 
  (mutate $ (Connection/new S R))
  (mutate (deliver $) &deliver-through))

(defstruct Eh
  (name (String) (proc ($) (name $)))
  (step (proc () ()))
  (busy? (Boolean)) (proc ($) (busy? $))
  (inq (FIFO) (FIFO/new))
  (outq (FIFO) (FIFO/new))
  (enqueue-input (Action (Input-Message)))
  (dequeue-input (Procedure () (Input-Message)))
  (empty-input? (Predicate))
  (output-queue (Attribute (FIFO)) #undefined)
  (enqueue-output (Action (Output-Message)))
  (dequeue-output (Procedure () (Output-Message)))
  (empty-output? (Predicate))
  (clear-outputs (Action))
  (send (Action (String *)))
  (outputs-as-list (Attribute (List (Output-Message))))
  (map-outputs (Action (Action (Output-Message)))))
(defun Eh/new (N)
  (mutate (name $) N)
  (mutate (inq $) (FIFO/new))
  (mutate (outq $) (FIFO/new)))

(defstruct Leaf (N S)
  (name (Attribute (String)) #undefined)
  (step (Action) #undefined)
  (busy? (Predicate) #undefined))
(defun Leaf/new (N S)
  (mutate $ (Eh/new))
  (mutate (name $) N)
  (mutate (step $) S)
  (mutate (busy? $) #false))

(defstruct Container (N S)
  (name (Attribute (String)) #undefined)
  (step (Action) #undefined)
  (busy? (Predicate) #undefined))
(defun Container/new (N S)
  (mutate $ (Eh/new))
  (mutate (name $) N)
  (mutate (step $) &container-step)
  (mutate (busy? $) &container-busy))

(defun container-busy? ($)
  (cond
    ((or (any child is busy? $) 
	 (any child has inputs pending $))
     #true)
    (t #false)))

(defun container-step ($)
  (cond
    ((or (any child is busy? $) 
	 (any child has inputs pending $))
     (step all children $))
    (t (mutate $m (pop $))
       (for every connection deliver message $m))))

(defun deliver-up ($ m)
  (enqueue-output (slot receiver $) (slot datum m)))

(defun deliver-down ($ m)
  (enqeue-input (slot receiver $) (slot datum m)))

(defun deliver-across ($ m)
  (enqeue-input (slot receiver $) (slot datum m)))

(defun deliver-through ($ m)
  (enqueue-output (slot receiver $) (slot datum m)))

(defun leaf-step ($)
  (mutate $m (pop $))
  (send $ "stdout" (slot datum $)))
