def-synonym Port-Kind ~ String
def-synonym Port ~ String
def-synonym Name ~ String
def-synonym Step ~ Action
def-synonym Datum ~ *

def-proto FIFO:
   enqueue : Action
   dequeue : Attribute -> (Message)
   push : Action (Message)
   clear : Action
   empty? : Predicate
   
def-proto Message:
   port : Port-Kind
   datum : *

def-kind Input-Message ~ Message:
def-kind Output-Message ~ Message:

def-proto Sender [C P]:
   component : Component = C
   port : Port-Kind = P

def-proto Receiver [C P]:
   component : Component = C
   port : Port-Kind = P

def-proto Connection [S R]:
   sender : Sender = S
   receiver : Receiver = R
   deliver : Action (Output-Message)


def-kind Up [S R] ~ Connection [S R]:
   deliver :: Action (Output-Message) = &deliver-up
def-kind Down [S R] ~ Connection [S R]:
   deliver :: Action (Output-Message) = &deliver-down
def-kind Across [S R] ~ Connection [S R]:
   deliver :: Action (Output-Message) = &deliver-across
def-kind Through [S R] ~ Connection [S R]:
   deliver :: Action (Output-Message) = deliver-through
   
def-proto Eh [N]:
   name : Attribute -> String = N
   step : Action
   busy? : Predicate
   inq : FIFO
   outq : FIFO
   enqueue-input : Action (Input-Message)
   dequeue-input : Procedure -> Input-Message
   empty-input? : Predicate
   output-queue : Attribute -> FIFO
   enqueue-output : Action (Output-Message)
   dequeue-output : Procdure -> Output-Message
   empty-output? : Predicate
   clear-outputs : Action
   send : Action (Port Datum)
   outputs-as-list : Attribute -> List[Output-Message]
   map-outputs : Action (Action (Output-Message))

def-kind Leaf [N S]:
   name :: Attribute -> String = N
   step :: Action = S
   busy? :: Predicate = False
def-kind Container [N]:
   name :: Attribute -> String = N
   step :: Action = &container-step
   busy? :: Predicate = &container-busy

def-kind Component = Leaf | Container

def-predicate container-busy?:
   true-false-choice [any child is busy?] | [any child has inputs pending]:
       True: True
       False: False

def-action container-step:
   true-false-choice [any child is busy?] | [any child has inputs pending]:
       True: for-all $c = .children $c.step
       False: 
           $m = .inputq.dequeue
           for-all $cn = .connections:
               [deliver message $m using connection $cn]

def-action deliver-up ((m : Output-Message)):
   dest = .receiver
   dest/enqueue-output (dest m.datum)
def-action deliver-down ((m : Input-Message)):
   dest = .receiver
   dest/enqueue-input (dest m.datum)
def-action deliver-across ((m : Output-Message)):
   dest = .receiver
   dest/enqueue-input (dest m.datum)
def-action deliver-through ((m : Input-Message)):
   dest = .receiver
   dest/enqueue-output (dest m.datum)
   
